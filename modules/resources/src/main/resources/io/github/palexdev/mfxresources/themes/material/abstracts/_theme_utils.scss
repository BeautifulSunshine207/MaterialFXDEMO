@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';
@use '../tokens/theme' as Theme;

/// Given an elevation level as a number, returns it as a string: 'LEVEL' + number.
/// e.g: "LEVEL0", "LEVEL3"
@function ElevationLevel($elevation) {
  $clamped_val: math.clamp(0, $elevation, 5);
  @return unquote('LEVEL' + $clamped_val);
}

/// Computes the elevation layer color for complex components with more than one background color
/// The given tint color is made opaque according to the given elevation level, then all the other
/// backgrounds are appended at the end.
/// e.g: 'rgba(tint, 0.5), red, blue' (without quotes)
@function ElevationLayerComplex($tint, $elevation, $bg-colors...) {
  $clamped_elevation: math.clamp(0, $elevation, 5);
  $tmp: '#{rgba($tint, Theme.GetElevationPercentage($clamped_elevation))}';
  @each $token in $bg-colors {
    $tmp: $tmp + ', #{Theme.GetSchemeColor($token)}'
  }
  @return unquote($tmp);
}

/// Computes the elevation layer color for simple components.
/// Given a tint, the desired elevation and the base color, the resulting layer will have a color that is
/// the mix of the two colors (tint first, bg after), the mix percentage is given by the elevation.
@function ElevationLayer($tint, $elevation, $bg-color) {
  $clamped_elevation: math.clamp(0, $elevation, 5);
  @return mix($tint, Theme.GetSchemeColor($bg-color), Theme.GetElevationPercentage($clamped_elevation));
}

@function StateLayer($tint, $bg, $state) {
  $cTint: if(type_of($tint) == string, Theme.GetSchemeColor($tint), $tint);
  $cBg: if(type_of($bg) == string, Theme.GetSchemeColor($bg), $bg);
  $ratio: Theme.GetStateLayer($state);
  @return mix($cTint, $cBg, $ratio);
}