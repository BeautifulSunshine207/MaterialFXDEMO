import com.vanniktech.maven.publish.SonatypeHost

import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
    id 'io.miret.etienne.sass' version "$gradleSass"
}

version = "$mfxresources"

dependencies {
    api(project(":effects"))

    testImplementation "org.kordamp.ikonli:ikonli-fluentui-pack:$ikonli"
    testImplementation "org.kordamp.ikonli:ikonli-win10-pack:$ikonli"
}

java {
    withSourcesJar()
    withJavadocJar()
    tasks.withType(Jar).each { it.archiveBaseName.set("mfxresources") }
}

sourcesJar {
    mustRunAfter processResources
}

sass {
    // dart-sass version to use:
    version = "$sass"

    // Directory where to install dart-sass:
    directory = file("${rootDir}/.gradle/sass")

    // Base URL where to download dart-sass from:
    baseUrl = 'https://github.com/sass/dart-sass/releases/download'

    // Disable automatic copying to war (default is enabled):
    noAutoCopy()
}

compileSass {
    String baseDir = "io/github/palexdev/mfxresources/themes"
    sourceDir = project.file("src/main/resources/" + baseDir)
    outputDir = project.file("src/main/resources/" + baseDir)
    sourceMap = none
}

tasks.register('postProcessCss') {
    doLast {
        String baseDir = "io/github/palexdev/mfxresources/themes"
        File outputDir = project.file("src/main/resources/" + baseDir)
        outputDir.eachFileRecurse(groovy.io.FileType.FILES) {
            if (it.name.endsWith('.css')) {
                String newText = it.text.replaceAll('[}]\n(?=\\S)', '}' + System.lineSeparator().repeat(2))
                        .replaceAll('[;]\n(?=[/])', ';' + System.lineSeparator().repeat(2))
                        .replaceAll("(, )(?=(.mfx))", "," + System.lineSeparator())
                Files.writeString(
                        it.toPath(),
                        newText,
                        StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING
                )
            }
        }
    }
    mustRunAfter compileSass
    doNotTrackState("CSS must be post processed always to make sure it's correct")
}

processResources {
    // This makes gradle compile sass to css before copying the resources
    dependsOn compileSass
    dependsOn postProcessCss
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.S01)
    signAllPublications()
}