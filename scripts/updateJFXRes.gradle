import groovy.transform.Field
import org.apache.tools.ant.taskdefs.condition.Os

import java.nio.file.Files
import java.nio.file.StandardCopyOption

// Special handling for Windows. Fuck. This. Shit.
@Field var isWindows = (Os.isFamily(Os.FAMILY_WINDOWS))

tasks.register("updateJFXRes") {
    doLast {
        def rootDir = rootProject.projectDir.absolutePath
        def resDir = "$rootDir/modules/resources/src/main/resources/io/github/palexdev/mfxresources/javafx"
        def caspianDir = "$resDir/caspian"
        def modenaDir = "$resDir/modena"

        // Check if svn, npm, csso and cssbeautify-cli are installed on the host
        if (!execute(["svn", "help"])) throw new GradleException("svn command could not be found")
        if (!execute(["npm", "-v"])) throw new GradleException("npm command could not be found")
        if (!execute(["cleancss", "-v"])) throw new GradleException("cleancss command could not be found")
        if (!execute(["cssbeautify-cli", "-v"])) throw new GradleException("cssbeautify-cli command could not be found")
        logger.warn("All dependencies have been found")

        // Download the whole repository to a temp dir
        def tmpDir = Files.createTempDirectory("gradle.tmp").toString()
        logger.warn("Executing svn command")
        execute([
            "svn",
            "export",
            "--force",
            "https://github.com/openjdk/jfx.git/trunk/modules/javafx.controls/src/main/resources/com/sun/javafx/scene/control/skin",
            "$tmpDir" as String
        ])

        // Move the required files to their respective directories
        logger.warn("Processing Caspian resources")
        processCssFiles(new File(tmpDir, "caspian"), new File(caspianDir))
        logger.warn("Zipping Caspian resources")
        ant.zip(destfile: new File(caspianDir, "assets.zip")) {
            fileset(dir: new File(caspianDir, "assets/"))
        }
        delete(new File(caspianDir, "assets"))

        logger.warn("Processing Modena resources")
        processCssFiles(new File(tmpDir, "modena"), new File(modenaDir))
        logger.warn("Zipping Modena resources")
        ant.zip(destfile: new File(modenaDir, "assets.zip")) {
            fileset(dir: new File(modenaDir, "assets/"))
        }
        delete(new File(modenaDir, "assets"))

        delete(tmpDir)
        logger.warn("JavaFX resources have been updated successfully")
    }
}

void processCssFiles(File source, File dest) {
    source.eachFile {
        if (it.name.endsWith(".css")) {
            // Optimize
            logger.debug("Optimizing: $name")
            execute([
                "cleancss",
                "-O1", "all:on;specialComments:all",
                "--format", "beautify",
                "${it.absolutePath}" as String,
                "-o", "${it.absolutePath}" as String
            ])

            // Beautify
            logger.debug("Beautifying: $name")
            execute([
                "cssbeautify-cli",
                "-i2",
                "-f", "$it.absolutePath" as String,
                "-w", "${new File(dest, it.name)}" as String
            ])

            it.delete()
        } else {
            def assetsDir = new File(dest, "assets")
            assetsDir.mkdirs()
            Files.copy(it.toPath(), new File(dest, "assets/$it.name").toPath(), StandardCopyOption.REPLACE_EXISTING)
            it.delete()
        }
    }
}

boolean execute(List<String> cmd) {
    if (isWindows) cmd.addAll("cmd", "/c") // Prepend call to cmd
    Process proc = new ProcessBuilder(cmd).start()
    proc.waitForOrKill(10_000)
    return proc.exitValue() == 0
}