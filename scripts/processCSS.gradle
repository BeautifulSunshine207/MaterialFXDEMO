import groovy.transform.Field
import org.apache.tools.ant.taskdefs.condition.Os

// Special handling for Windows. Fuck. This. Shit.
@Field var isWindows = (Os.isFamily(Os.FAMILY_WINDOWS))

tasks.register("processCSS") {
    doLast {
        def rootDir = rootProject.projectDir.absolutePath
        def resDir = "$rootDir/modules/resources/src/main/resources/io/github/palexdev/mfxresources/sass/themes"
        List<File> themesDirs = Arrays.stream(new File(resDir).listFiles())
            .filter(File::isDirectory)
            .toList()

        // Check if npm, cleancss-cli and cssbeautify-cli are installed on the host
        if (!execute(["npm", "-v"])) {
            logger.error("npm command could not be found")
            return
        }
        if (!execute(["cleancss", "-v"])) {
            logger.error("cleancss command could not be found")
            return
        }
        if (!execute(["cssbeautify-cli", "-v"])) {
            logger.error("cssbeautify-cli command could not be found")
            return
        }
        logger.info("All dependencies have been found")

        themesDirs.each { dir ->
            dir.eachFileRecurse {
                def name = it.name
                def path = it.absolutePath
                if (!name.startsWith("tmp") && name.endsWith(".css")) {
                    // Unfortunately, doesn't run very well on SCSS files
                    def tmp = new File("${dir}/tmp.css")
                    logger.warn("Optimizing: $name")
                    execute([
                        "cleancss",
                        "-O1", "all:on;specialComments:all",
                        "--format", "beautify",
                        "${path}" as String,
                        "-o", "${tmp}" as String
                    ])

                    logger.warn("Beautifying: $name")
                    execute([
                        "cssbeautify-cli",
                        "-i2",
                        "-f", "${tmp}" as String,
                        "-w", "${path}" as String
                    ])

                    delete(tmp)
                }
            }
        }
    }
}

boolean execute(List<String> cmd) {
    if (isWindows) cmd.addAll(0, "cmd", "/c") // Prepend call to cmd
    try {
        Process proc = new ProcessBuilder(cmd).start()
        proc.waitForOrKill(10_000)
        return proc.exitValue() == 0
    } catch (Throwable e) {
        logger.error(e.getMessage())
        return -1
    }
}